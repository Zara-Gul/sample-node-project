name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: SSH and Deploy
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          ssh -tt -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            set -e
            cd /home/ec2-user/sample-node-project
            git pull origin main
            echo "Git pull completed!"
          EOF
          echo "SSH session and deployment completed successfully!"

      # Step 3: Set up Node.js and install dependencies
      #- name: Set up Node.js
       # uses: actions/setup-node@v3
       # with:
       #   node-version: '16'

    # - name: Install dependencies
      #  run: |
      #    npm install

      # Step 4: Run tests (optional, uncomment if tests should be run)
      # - name: Run tests
      #   run: |
      #     npm test

      # Step 5: Build and deploy Docker image locally on the server via SSH
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Docker Deployment
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "Starting Docker Deployment..."
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            set -e
            cd /home/ec2-user/sample-node-project
            
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Remove existing backend container
            docker compose down || true
            # Remove existing backend image
            docker rmi sample-node-app || true
            
            # Build new backend image
            IMAGE_TAG=$(git rev-parse --short HEAD)
            sudo docker build -t sample-node-project:$IMAGE_TAG .
            
            # Bring up the Docker services
            docker compose up -d
            echo "Docker Deployment completed successfully!"
          EOF

      # Step 6: Handle build and deployment failures
      - name: Notify on failure
        if: failure()
        run: |
          echo "Build or deployment failed. Check the logs on the server."
